#!/usr/bin/env bash

set -e

# Constants
NAME="${NAME:-"${0##*/}"}"
POINTER="----->"
SPACER="      "

# Config
BPACK_DIR="$(realpath "$(dirname "$0")/..")"
BUILD_DIR="$(realpath "$1")"
CACHE_DIR="$(realpath "$2")"

MAVEN_REPO_URL="https://repo1.maven.org/maven2"
APACHE_REPO_URL="${MAVEN_REPO_URL}/org/apache"

###############################################################################
#  installJre
installJre () {
   local oldPwd JVM_BPACK_URL JDK_HOME

   JVM_BPACK_URL="http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz"
   JDK_HOME="${BUILD_DIR}/.jdk"

   oldPwd="${PWD}"
   cd "${BUILD_DIR}"

   echo -n "${POINTER} Bundling JRE ${JRE_VERSION} to [${JRE_DIR}]"

   curl --silent --location "${JVM_BPACK_URL}" | tar xz
   . bin/java
   echo "java.runtime.version=${JRE_VERSION}" > "${BUILD_DIR}/system.properties"
   logger -p user.notice -t "slugc[$$]" "language_pack_java download_jdk"
   LOGGER_FLAGS="${LOGGER_FLAGS} download_jdk"
   javaVersion="$(detect_java_version "${BUILD_DIR}")"
   install_java "${BUILD_DIR}" "${javaVersion}"
   jdk_overlay "${BUILD_DIR}"

   if [ ! -d "${JDK_HOME}" ]
   then
      echo " FAIL"
      echo "${SPACER} JDK not found in [${JDK_HOME}]"
      exit 1
   fi

   if [ ! -d "${JDK_HOME}/jre" ]
   then
      echo " FAIL"
      echo "${SPACER} JRE not found in [${JDK_HOME}/jre]"
      exit 1
   fi

#   mv -f "${JDK_HOME}/jre" "${BUILD_DIR}"
#   rm -rf "${JDK_HOME}"
   mv -f "${JDK_HOME}" "${BUILD_DIR}/jre"

   wait

   echo " DONE"

   cd "${oldPwd}"
}

###############################################################################
#  installDerbyDatabase
installDerbyDatabase () {
   local oldPwd DERBY_URL

   DERBY_URL="http://archive.apache.org/dist/db/derby/db-derby-${DERBY_VERSION}/db-derby-${DERBY_VERSION}-bin.tar.gz"

   oldPwd="${PWD}"
   cd "${BUILD_DIR}"

   echo -n "${POINTER} Bundling Derby to [${DERBY_DIR}]"

   curl --silent --location "${DERBY_URL}" | tar xz
   mv -f "${BUILD_DIR}/db-derby-${DERBY_VERSION}-bin" "${DERBY_HOME}"

   cp -rf "${BPACK_DIR}/database/"* "${DERBY_HOME}/"
   chmod +x "${DERBY_HOME}/bin/derby_server.sh"
   chmod +x "${DERBY_HOME}/bin/setenv.sh"
   mkdir -p "${DERBY_HOME}/db"

   wait

   echo " DONE"

   cd "${oldPwd}"
}

###############################################################################
#  installTomeeServer
installTomeeServer () {
   local oldPwd TOMEE_URL BVAL_CORE_URL BVAL_JSR_URL DERBYCLIENT_URL

   TOMEE_URL="${APACHE_REPO_URL}/tomee/apache-tomee/${TOMEE_VERSION}/apache-tomee-${TOMEE_VERSION}-plus.tar.gz"
   BVAL_CORE_URL="${APACHE_REPO_URL}/bval/bval-core/1.1.2/bval-core-1.1.2.jar"
   BVAL_JSR_URL="${APACHE_REPO_URL}/bval/bval-jsr/1.1.2/bval-jsr-1.1.2.jar"

   oldPwd="${PWD}"
   cd "${BUILD_DIR}"

   echo -n "${POINTER} Bundling TomEE version ${TOMEE_VERSION} to [${TOMEE_DIR}]"

   curl --silent --location "${TOMEE_URL}" | tar xz
   mv -f "${BUILD_DIR}/apache-tomee-plus-${TOMEE_VERSION}" "${TOMEE_HOME}"

   cp -rf "${BPACK_DIR}/server/"* "${TOMEE_HOME}/"
   chmod +x "${TOMEE_HOME}/bin/setenv.sh"
   cd "${TOMEE_HOME}/lib"

   if [ "${TOMEE_VERSION}" = "8.0.0" ]
   then
      rm -rf "${TOMEE_HOME}/lib/bval-"*
      curl --silent --remote-name --location "${BVAL_CORE_URL}" &
      curl --silent --remote-name --location "${BVAL_JSR_URL}" &
   fi

   cp -rf "${DERBY_HOME}/lib/derbyclient.jar" "${TOMEE_HOME}/lib/derbyclient-${DERBY_VERSION}.jar"

   wait

   echo " DONE"

   cd "${oldPwd}"
}

###############################################################################
#  installScripts
installScripts () {
   local oldPwd

   oldPwd="${PWD}"
   cd "${BUILD_DIR}"

   echo -n "${POINTER} Bundling scripts to [${SCRIPTS_DIR}]"

   mkdir -p "${SCRIPTS_HOME}"
   cp -rf "${BPACK_DIR}/scripts/"*.sh "${SCRIPTS_HOME}"
   chmod +x "${SCRIPTS_HOME}/"*.sh

   echo " DONE"

   cd "${oldPwd}"
}

###############################################################################
#  createAdminPassword
createAdminPassword () {
   local random oldPwd

   oldPwd="${PWD}"
   cd "${BUILD_DIR}"

   echo "${POINTER} Create admin password"
   echo "${SPACER} !!! ATTENTION !!! ATTENTION !!! ATTENTION !!!"
   echo -n "${SPACER} Admin password is "

   random="$(dd if=/dev/urandom count=1 2>/dev/null | md5sum | cut -c 1-6)"
   sed -i.bak -e "s/%%PASSWORD%%/${random}/" "${TOMEE_HOME}/conf/tomcat-users.xml"

   echo "${random}"
   echo "${SPACER} !!! ATTENTION !!! ATTENTION !!! ATTENTION !!!"

   cd "${oldPwd}"
}

###############################################################################
#  createBootloader
createBootloader () {
   local oldPwd

   oldPwd="${PWD}"
   cd "${BUILD_DIR}"

   echo -n "${POINTER} Bundling boot.sh"

   cat "${BPACK_DIR}/scripts/boot.sh.tmpl" \
   | sed -e 's/\$<<SCRIPTS_DIR>>/'"${SCRIPTS_DIR}"'/' \
   | sed -e 's/\$<<JRE_DIR>>/'"${JRE_DIR}"'/' \
   | sed -e 's/\$<<TOMEE_DIR>>/'"${TOMEE_DIR}"'/' \
   | sed -e 's/\$<<DERBY_DIR>>/'"${DERBY_DIR}"'/' \
   > "boot.sh"

   if [ ! -f "boot.sh" ]
   then
      echo " FAIL"
      exit 1
   fi

   chmod +x "boot.sh"

   echo " DONE"

   cd "${oldPwd}"
}

setUpEnvironment () {
   DERBY_VERSION="${DERBY_VERSION:-10.14.2.0}"
   DERBY_DIR="${DERBY_DIR:-derby}"
   DERBY_HOME="${BUILD_DIR}/${DERBY_DIR}"

   TOMEE_VERSION="${TOMEE_VERSION:-8.0.0}"
   TOMEE_DIR="${TOMEE_DIR:-tomee}"
   TOMEE_HOME="${BUILD_DIR}/${TOMEE_DIR}"

   JRE_VERSION="${JRE_VERSION:-1.8}"
   JRE_DIR="${JRE_DIR:-jre}"
   JRE_HOME="${BUILD_DIR}/${JRE_DIR}"

   SCRIPTS_DIR="${SCRIPTS_DIR:-bin}"
   SCRIPTS_HOME="${BUILD_DIR}/${SCRIPTS_DIR}"
}

BPACK_CONFIG="bin/config.lib.sh"
BPACK_CONFIG_LIB="${BPACK_DIR}/${BPACK_CONFIG}"

if [ -f "${BPACK_CONFIG_LIB}" -a -r "${BPACK_CONFIG_LIB}" ]
then
   echo "${POINTER} Found config [${BPACK_CONFIG}]"
   . "${BPACK_CONFIG_LIB}"
fi

setUpEnvironment

if [ "${DEBUG_BUILD}" ]
then
   echo "${POINTER} Build debug enabled."
   echo "${SPACER} Environment vars are:"
   env | sed -e "s/^/${SPACER}${SPACER}/"
fi

if [ "${TRACE_BUILD}" ]
then
   echo "Tracing build enabled."
   set -x
fi

installJre
installDerbyDatabase
installTomeeServer
installScripts
createAdminPassword
createBootloader

exit 0
